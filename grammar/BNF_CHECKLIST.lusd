Note: This is not 1 to 1 with the code since each lexeme in this document will be represented by their corresponding token in the code
#DONE
# BASE SYNTAX FORM
<LUSEED_PROGRAM_STMNT> ::= (<IMPORT_STMNT>)* main(){<STMNT_LIST>}
#DONE

#DONE
<IMPORT_STMNT> ::= import <IDENTIFIER>;
                 | from <IDENTIFIER> import <IDENTIFIER>;
                 | from <IDENTIFIER> import all;
#DONE

<STMNT_LIST> ::= <STMNT> | <STMNT> <STMNT_LIST>
<STMNT> ::= #DONE<IMPORT_STMNT>#DONE |#<DEC_STMNT># | #DONE<ASSIGN_STMNT>#DONE | #<INPUT_STMNT># | #<OUTPUT_STMNT># | #<CONDN_STMNT># | #<LOOP_STMNT># | #<UNARY_STMNT># 
          | #<PASS_STMNT># | #<FUNC_STMNT># | <CLASS_STMNT> | <ERROR_STMNT> | #<CAST_STMNT># | #<RETURN_STMNT># | #<INFO_STMNT># | #<SWAP_STMNT># 
          | #<CHECK_STMNT>#
          
<CHARACTERSET> ::= <ALNUM> | <SPECIAL_CHAR>

# IDENTIFIER
<IDENTIFIER> ::= <ALPHABET><VALID_CHAR>*<ALNUM>
<VALID_CHAR> ::= <ALNUM> | <UNDSC>
<ALNUM> ::= <ALPHABET> | <DIGITS>
<ALPHABET> ::= <LOWERC> | <UPPERC>
<LOWERC> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
<UPPERC> ::= A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
<DIGITS> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<UNDSC> ::= _

# SPECIAL CHARACTER
<SPECIAL_CHAR> ::= + | - | * | / | % | = | \ | " | ' | | | ! | ^ | ~ | & | ? | ^ 
                | # | @ | - | ` | <UNDSC> | <DELIMITERS> | <OP_ARITH_SNGLE> | <OP_RELATION_SNGLE> | <WHITESPACES>

# OPERATORS
    <OP_ASSIGNMENT> ::= = | += | -= | *= | /= | %= | ~=
    <OP_ARITHMETIC> ::= <OP_ARITH_SNGLE> | **
    <OP_ARITH_SNGLE> ::= <OP_ARITH_M> | <OP_ARITH_A> 
    <OP_ARITH_M> ::= * | / | ~ | %
    <OP_ARITH_A> ::= + | -
    <OP_UNARY> ::= <OP_ARITH_A> | <OP_UNARY_S>
    <OP_UNARY_M> ::= ++ | -- 
    <OP_RELATION> ::= <OP_RELATION_E> | <OP_RELATION_R>
    <OP_RELATION_E> ::= == | !=
    <OP_RELATION_R> ::= <OP_RELATION_SNGLE> | >= | <=
    <OP_RELATION_SNGLE> ::= > | <
    <OP_BOOLEAN> ::= not | and | or            
    <DELIMITERS> ::= ; | : | { | } | [ | ] | ( | ) | , | .              
    <WHITESPACES> ::= <space> | <newline>
#endregion 

# 
<DATA_TYPE> ::= float | double | <DATA_INT> | <DATA_CHAR> 
                    | <DATA_BOOL> | <DATA_OBJ> | <DATA_CONST>
<DATA_INT> ::= int | integer
<DATA_CHAR> ::= char | character
<DATA_STR> ::= str | string
<DATA_BOOL> ::= bool | boolean
<DATA_OBJ> ::= obj | object     
<DATA_CONST> ::= const | constant

# VALUES
<LIT_DATA> ::= <LIT_INT> | <LIT_FLT> | <LIT_DBL> | <LIT_CHAR> | <LIT_STR> 
<LIT_INT> ::= <DIGITS>^+ | -<DIGITS>^+
<LIT_FLT> ::= <DIGITS>^+.<DIGITS>^+f | -<DIGITS>^+.<DIGITS>^+f
<LIT_DBL> ::= <DIGITS>^+.<DIGITS>^+ | -<DIGITS>^+.<DIGITS>^+ 
<LIT_CHAR> ::= '<CHARACTERSET>'
<LIT_BOOL> ::= true | false
<LIT_STR> ::= "<CHARACTERSET>*"

# VALUES


# EXPRESSIONS
<EXPR_PAREN> ::= (<EXPR>) 
<EXPR> ::= <EXPR_OR>
<EXPR_OR> ::=  <EXPR_AND> or <EXRP_OR> | <EXPR_AND>
<EXPR_AND> ::= <EXPR_EQ> and <EXPR_AND> | <EXPR_EQ> 
<EXPR_EQ>  ::= <EXPR_REL> <OP_RELATION_E> <EXPR_EQ> | <EXPR_REL>
<EXPR_REL> ::= <EXPR_ADD> <OP_RELATION_R> <EXPR_REL> | <EXPR_ADD>
<EXPR_ADD> ::= <EXPR_MUL> <OP_ARITH_A> <EXPR_ADD> | <EXPR_MUL> 
<EXPR_UN>  ::= <EXPR_EXPO> | not<EXPR_UN> | +<EXPR_UN> | -<EXPR_UN>
<EXPR_EXPO> ::= <EXPR_ATOM>**<EXPR_UN> | <ATOM>
<ATOM> ::= <LIT_DATA> | <IDENTIFIER> | <PROPERTY> | <FUNC_CALL> | <METHOD_CALL> | <EXPR_PAREN>

# ACESS MODIFIERS
<ACCESS_MOD> ::= public | private | protected

# KEYWORDS & NOISEWORDS
<KEYWORDS>  ::= all | and | ask | bool | break | catch | char | check | class | const | continue | display | do | double | elif 
              | else | false | finally | float | for | foreach | from | func | if | import | info | init | inheritall | in | int  
              | list | main | not | null | or | obj | private | protected | public | quit | raise | repeat | return | str | then 
              | this | true | try | until | while

<NOISEWORDS> ::= boolean | character | constant | integer | information | initialize | object | string

# SIMPLE STATEMENTS
<SIMPLE_STMT> ::= <LIT_DATA>; | <IDENTIFIER>; | <PROPERTY>; | <EXPR>;

# DECLARATION STATEMENTS
<DEC_STMNT> ::= <ACCESS_MOD>? <DATA_TYPE> <IDENTIFIER>(, <IDENTIFIER>)*;
              | <ACCESS_MOD>? <DATA_TYPE> <IDENTIFIER> = <VALUE>(, <IDENTIFIER> = <VALUE>)*;
              | <ACCESS_MOD>? <IDENTIFIER> list[<VALUE>]([VALUE])* = <LIST>
<LIST> ::= [<VALUE>(, <VALUE>)*]
<VALUE> ::= <ATOM> | <EXPR>



# ASSIGNMENT  
<ASSIGN_STMNT> ::= <DEST_VALUE> <OP_ASSIGNMENT> <VALUE>;
                 | <DEST_VALUE>[<VALUE>]([VALUE])* <OP_ASSIGNMENT> <VALUE>;
                 | <DEST_VALUE> <OP_ASSIGN> <LIST>;
<DEST_VALUE> ::= <PROPERTY> <IDENTIFIER>
<LIST> ::= [<VALUE>(, <VALUE>)*]
<VALUE> ::= <ATOM> | <EXPR>

# INPUT STATEMENTS
<INPUT_STMNT> ::= (<IDENTIFIER> <OP_ASSIGN>)? ask(<LIT_STR>);
                | (<IDENTIFIER> <OP_ASSIGN>)? ask(<IDENTIFIER>);
                | (<IDENTIFIER> <OP_ASSIGN>)? ask(<PROPERTY>);
                | (<IDENTIFIER> <OP_ASSIGN>)? ask(<FUNC_CALL>);
                | (<IDENTIFIER> <OP_ASSIGN>)? ask(<METHOD_CALL>);

# OUTPUT STATMENT
<OUTPUT_STMNT> ::= display(<ARGS_LIST>);

# CONDITIONAL
<CONDN_STMNT> ::= <IF_STMNT> | <IF_ELSE_STMNT> | <ELIF_STMNT>
<IF_STMNT> ::= if(<EXPR>) then:{<STMNT_LIST>}
<IF_ELSE_STMNT> ::= if(<EXPR>) then:{<STMNT_LIST>} else:{<STMNT_LIST>}
<ELIF_STMNT> :: if(<EXPR>) then:{<STMNT_LIST>} (<ELIF_BLOCK>)^+ else:{<STMNT_LIST>}
<ELIF_BLOCK> :: elif(<EXPR>) then:{<STMNT_LIST>}

# LOOPING STATEMENTS
<LOOP_STMNT> ::= <LOOP_FOR> | <LOOP_FOREACH> | <LOOP_WHILE> | <LOOP_UNTIL> | <LOOP_REPEAT>
<LOOP_FOR> ::= (loop <IDENTIFIER>:)? for(<INIT>; <EXPR>; <UNARY_EXP>):{(<LOOP_BODY>)^+}
<LOOP_FOREACH> ::= (loop <IDENTIFIER>:)? foreach(<DATA_TYPE> <IDENTIFIER> in <IDENTIFIER>): {(<LOOP_BODY>)^+}
<LOOP_WHILE> ::= (loop <IDENTIFIER>:)? while(<EXPR>):{(<LOOP_BODY>)^+}
<LOOP_UNTIL> ::= (loop <IDENTIFIER>:)? do:{(<LOOP_BODY>)^+}until(<EXPR>);
<LOOP_REPEAT> ::= (loop <IDENTIFIER>:)? repeat(<VALUE>):{(<LOOP_BODY>)^+}
<INIT> ::= <DATA_TYPE>? <IDENTIFIER> = <VALUE>
<VALUE> ::= <ATOM> | <EXPR>
<LOOP_BODY> ::= <STMNT> | <CTRL_STMNT>

# UNARY STATEMENT
<UNARY_STMNT> ::= <IDENTIFIER><OP_UNARY>;
                | <OP_UNARY><IDENTIFIER>;

# CONTROL STATMENT
<CTRL_STMNT> ::= break;
               | continue;        

# PASS STATEMENT
<PASS_STMNT> ::= pass;

# FUNCTION STATEMENT
<FUNC_STMNT> ::= <FUNC_DEC> | <FUNC_CALL>;
<FUNC_DEC> ::= <ACCESS_MOD>? func <IDENTIFIER> (<PARAM_LIST>):{<STMNT_LIST>}
<PARAM_LIST> ::= ε | <DATA_TYPE> <IDENTIFIER> | <DATA_TYPE> <IDENTIFIER>, <PARAM_LIST>
<FUNC_CALL> ::= <IDENTIFIER>(<ARGS_LIST>);
<ARGS_LIST> ::= ε | <VALUE> | <VALUE>, <ARGS_LIST>
<VALUE> ::= <ATOM> | <EXPR>

# CLASS STATMENT
<CLASS_STMNT> ::= <CLASS_DEF> | <CLASS_METHOD> | <CLASS_INST> | <METHOD_CALL>;
<CLASS_DEF> ::= <ACCESS_MOD>? class <IDENTIFIER>:{<CLASS_CNSTRCT> <STMNT_LIST>*} 
              | <ACCESS_MOD>? class <IDENTIFIER>:{<STMNT_LIST>} 
              | <ACCESS_MOD>? class <IDENTIFIER>(<IDENTIFIER>):{<CLASS_CNSTRCT> <STMNT_LIST>*}
              | <ACCESS_MOD>? class <IDENTIFIER>(<IDENTIFIER>):{<STMNT_LIST>}

<CLASS_CNSTRCT> ::= func init(this, <PARAM_LIST>):{(<STMNT_LIST>)}
<CLASS_METHOD> ::= <ACCESS_MOD>? func <IDENTIFIER>(self, <PARAM_LIST>):{<STMNT_LIST>}
<CLASS_INST> ::= <DATA_OBJ> <IDENTIFIER> = <IDENTIFIER>(<ARGS_LIST>);
<PROPERTY> ::= <IDENTIFIER>.<IDENTIFIER>
             | this.<IDENTIFIER>
<METHOD_CALL> ::= <IDENTIFIER>.<IDENTIFIER>(<ARGS_LIST>)
                | this.<IDENTIFIER>(<ARGS_LIST>)

# ERROR HANDLING
<ERROR_STMNT> ::= <TRY_CATCH_STMNT> | <RAISE_STMNT>
<TRY_CATCH_STMNT> ::= <TRY_BLOCK> <CATCH_BLOCK> | <TRY_BLOCK> <CATCH_BLOCK> <FINAL_BLOCK>
<TRY_BLOCK> ::= try:{<STMNT_LIST>}
<CATCH_BLOCK> ::= catch:{<STMNT_LIST>}| catch (<EXCEP>):{<STMNT_LIST>}  
<FINAL_BLOCK> ::= finally:{<STMNT_LIST>}
<RAISE_STMNT> ::= raise <EXEP>(<STR_LITERAL>);
<EXCEP> ::=  ArithmeticError | AttributeError | Exception | FloatingPointError | IndexError | KeyboardInterrupt 
          | LookupError | NameError | OverflowError | SyntaxError | TypeError | ValueError |ZeroDivisionError

# TYPE CAST STATEMENT
<CAST_STMNT> ::= <DATA_TYPE>? <DEST_VALUE> <OP_ASSIGNMENT> (<DATA_TYPE>) <IDENTIFIER>;
<DEST_VALUE> ::= <IDENTIFIER> | <PROPERTY>


# RETURN STATEMENT
<RETURN_STMNT> ::= return
                 | return VALUE(, VALUE)*;
<VALUE> ::= <ATOM> | <EXPR>

# SWAP STATMENT
<SWAP_STMNT> ::= <TWO_WAY_SWAP> | <THREE_WAY_SWAP>
<TWO_WAY_SWAP> ::= swap(<DEST_VALUE>, <DEST_VALUE>);
<THREE_WAY_SWAP> ::= swap(<DEST_VALUE>, <DEST_VALUE>, <DEST_VALUE>);
<DEST_VALUE> ::= <IDENTIFIER> | <PROPERTY>

<CHECK_STMNT> ::= check(<PROPERTY>);
                | check(<METHOD_CALL>);

<INFO_STMNT> ::= info();
               | info(<LIT_STR>);
               | info(<KEYWORDS>);
