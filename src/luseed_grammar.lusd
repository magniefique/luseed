#######################################################
# This contains the BNF for luseed programming language
#######################################################

<LUSEED_PROGRAM>    ::=     <IMPORT_STMNT> main(){<STMNT_LIST> <RETURN_STMNT>*}

#######################################################
# IMPORT STATEMENTS
#######################################################
<IMPORT_STMNT>      ::=     <IMPRT_LIB> | <IMPRT_ATTR>
<IMPORT_LIB>        ::=     import <IDENTIFIER>;
<IMPORT_ATTR>       ::=     from <IDENTIFIER> import <IDENTIFIER>; | from <IDENTIFIER> import all;

#######################################################
# STATEMENT BODY
#######################################################
<STMNT_LIST>        ::=     <STMNT>^*
<STMNT>             ::=     <DEC_STMNT> | <ASSIGN_STMNT> | <OUTPUT_STMNT> | <INPUT_STMNT> | <CONDN_STMNT> | <LOOP_STMNT> |
                            <FUNC_STMNT> | <CLASS_STMNT> | <ERROR_STMNT> | <CAST_STMNT> | <INFO_STMNT> | <SWAP_STMNT> | <CHECK_STMNT>

#######################################################
# CHARACTER SET
#######################################################

<CHARACTERSET>      ::=     <ALNUM><SPECIAL_CHAR>

#######################################################
# IDENTIFIER
#######################################################
<IDEN_LIST>         ::=     <IDENTIFIER>(, <IDENTIFIER>)*;
<IDENTIFIER>        ::=     <ALPHABET><ACCEPTED_CHAR>*<ALNUM>
<ACCEPTED_CHAR>     ::=     <ALNUM> | _
<ALNUM>             ::=     <ALPHABET> | <DIGITS>
<ALPHABET>          ::=     <LOWERC> | <UPPERC>
<LOWERC>            ::=     a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z
<UPPERC>            ::=     A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
<DIGITS>            ::=     0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

#######################################################
# SPECIAL CHARACTERS
#######################################################
<SPECIAL_CHAR>      ::=     + | - | * | / | % | = | \ | " | ' | | | ! | _ | ^ | ~ | & | ? | ^ | 
                            # | @ | - | ` | <DELIMITERS> | <OP_SNGLE_ARITH> | <OP_SNGLE_REL> | <WHITESPACES>
<WHITESPACES>       ::=     <space> | <newline>

#######################################################
# OPERATORS
#######################################################
<OP_ASSIGNMENT>     ::=     <OP_ASSIGN> | <OP_PLUS><OP_ASSIGN> | <OP_MINUS><OP_ASSIGN> | <OP_MULTIPLY><OP_ASSIGN> | 
                            <OP_DIVD><OP_ASSIGN> | <OP_MODULO><OP_ASSIGN> | <OP_FLRDIVD><OP_ASSIGN>

<OP_ARITHMETIC>     ::=     <OP_SNGLE_ARITH> | <OP_MULTIPLY><OP_MULTIPLY>

<OP_UNARY>          ::=     <OP_PLUS><OP_PLUS> | <OP_MINUS><OP_MINUS>

<OP_RELATION>       ::=     <OP_ASSIGN><OP_ASSIGN> | !<OP_ASSIGN> | <OP_GRTR_THAN> | <OP_LSS_THAN> | 
                            <OP_GRTR_THAN><OP_ASSIGN> | <OP_LSS_THAN><OP_ASSIGN>

<OP_BOOLEAN>        ::=     not | and | or

<DELIMITERS>        ::=     ; | : | { | } | [ | ] | ( | ) | , | .              

# ARITHMETIC
<OP_SNGLE_ARITH>    ::=     <OP_PLUS> | <OP_MINUS> | <OP_MULTIPLY> | <OP_DIVD> | <OP_MODULO> | <OP_FLRDIVD>
<OP_ASSIGN>         ::=     =
<OP_PLUS>           ::=     +
<OP_MINUS>          ::=     -
<OP_MULTIPLY>       ::=     *
<OP_DIVD>           ::=     /
<OP_MODULO>         ::=     %
<OP_FLRDIVD>        ::=     ~

# RELATIONAL   
<OP_SNGLE_REL>      ::=     <OP_GRTR_THAN>  |  <OP_LSS_THAN> 
<OP_GRTR_THAN>      ::=     >
<OP_LSS_THAN>       ::=     <

#######################################################
# DATA_TYPE
#######################################################

<DATA_TYPE>         ::=     float | double | list | <DATA_TYPE_INT> | <DATA_TYPE_CHAR> | 
                            <DATA_TYPE_BOOL> | <DATA_TYPE_OBJ | <DATA_TYPE_CONST>
<DATA_TYPE_INT>     ::=     int | integer
<DATA_TYPE_CHAR>    ::=     char | character
<DATA_TYPE_STR>     ::=     str | string
<DATA_TYPE_BOOL>    ::=     bool | boolean
<DATA_TYPE_OBJ>     ::=     obj | object     
<DATA_TYPE_CONST>   ::=     const | constant

#######################################################
# DATA_LITERAL
#######################################################
<DATA_LIT>          ::=     <INT_LITERAL> | <FLOAT_LITERAL> | <DOUBLE_LITERAL> | <CHAR_LITERAL> | <STR_LITERAL>
<INT_LITERAL>       ::=     <DIGITS>^+ | -<DIGITS>^+
<FLOAT_LITERAL>     ::=     <DIGITS>^+.<DIGITS>^+f | -<DIGITS>^+.<DIGITS>^+f 
<DOUBLE_LITERAL>    ::=     <DIGITS>^+.<DIGITS>^+ | -<DIGITS>^+.<DIGITS>^+ 
<CHAR_LITERAL>      ::=     '<CHARACTERSET>'
<STR_LITERAL>       ::=     "<CHARACTERSET>*"

#######################################################
# ACCESS MODIFIERS
#######################################################
<ACCESS_MOD>        ::=     public | private | protected

#######################################################
# KEYWORDS
#######################################################
<KEYWORDS>          ::=     all | and | ask | bool | break | catch | char | check | class | const | continue | display | do | double | elif |
                            else | false | finally | float | for | foreach | from | func | if | import | info | init | inheritall | in | int | 
                            list | main | not | null | or | obj | private | protected | public | quit | raise | repeat | return | str | then | 
                            this | true | try | until | while

#######################################################
# NOISE WORDS
#######################################################
<NOISEWORDS>        ::=     boolean | character | constant | integer | information | initialize | object | string

# DECLARATION STATEMENTS

# INPUT/OUTPUT STATEMENTS

# LISTS

# CONDITIONAL STATEMENTS

# LOOPING STATEMENTS

#######################################################
# ASSIGNMENT STATEMENTS
#######################################################
<ASSIGN_STMNT>      ::=     <IDENTIFIER> = <DATA_LIT>;

#######################################################
# FUNCTIONS
#######################################################
<FUNC_STMNT>        ::=     func <IDENTIFIER>(<PARAM_LIST>):{<STMNT_LIST>} | 
                            <ACCESS_MOD> func <IDENTIFIER>(<PARAM_LIST>):{<STMNT_LIST>}
<PARAM_LIST>        ::=     ε | <PARAMETER> | <PARAMETER>, <PARAM_LIST>
<PARAMETER>         ::=     <DEC_EXP> 

<FUNC_CALL>         ::=     <IDENTIFIER>(<ARGS_LIST>);
<ARGS_LIST>         ::=     ε | <DATA_LIT> | <DATA_LIT>, <ARGS_LIST>

#######################################################
# CLASSES
#######################################################
<CLASS_STMNT>       ::=     class <IDENTIFIER>:{<CLASS_BODY>} | class (<IDENTIFIER>):{<CLASS_BODY>} |
                            <ACCESS_MOD> class <IDENTIFIER>:{<CLASS_BODY>} | <ACCESS_MOD> class <IDENTIFIER>:{<CLASS_BODY>} 
<CLASS_BODY>        ::=     <CLASS_CNSTRCT> <METHOD_LIST>* | <METHOD_LIST> <METHOD_LIST>*
<CLASS_CNSTRCT>     ::=     func init(this, <PARAM_LIST>):{<CNSTRCT_BODY><STMNT_LIST>}
<CNSTRCT_BODY>      ::=     <PROPERTY_ASSIGN> | <METHOD_CALL>
<PROPERTY_ASSIGN>   ::=     this.<IDENTIFIER> = <DATA_LIT>;
<SELF_METHOD_CALL>  ::=     this.<IDENTIFIER>(<ARGS_LIST>);
<METHOD_LIST>       ::=     <FUNC_STMNT> | <METHOD_STMNT>
<METHOD_STMNT>      ::=     func <IDENTIFIER>(self, <PARAM_LIST>):{<STMNT_LIST>} |
                            <ACCESS_MOD> func <IDENTIFIER>(self, <PARAM_LIST>){<STMNT_LIST>}
<CLASS_INST>        ::=     <DATA_TYPE_OBJ> <IDENTIFIER> = <IDENTIFIER>(<ARGS_LIST>);
<CLASS_METHOD_CALL> ::=     <IDENTIFIER>.<IDENTIFIER>(<ARGS_LIST>); 

#######################################################
# ERROR-HANDLING STATEMENTS
#######################################################
<ERROR_STMNT>       ::=     <TRY_CATCH_STMNT> | <RAISE_STMNT>
<TRY_CATCH_STMNT>   ::=     <TRY_BLOCK> <CATCH_BLOCK> | <TRY_BLOCK> <CATCH_BLOCK> <FINAL_BLOCK>
<TRY_BLOCK>         ::=     try:{<STMNT_LIST>}
<CATCH_BLOCK>       ::=     catch:{<STMNT_LIST>}| catch (<EXCEP>):{<STMNT_LIST>}  
<FINAL_BLOCK>       ::=     finally:{<STMNT_LIST>}
<RAISE_STMNT>       ::=     raise <EXEP>(<STR_LITERAL>);
<EXCEP>             ::=     ArithmeticError | AttributeError | Exception | FloatingPointError | IndexError | KeyboardInterrupt | 
                            LookupError | NameError | OverflowError | SyntaxError | TypeError | ValueError |ZeroDivisionError

#######################################################
# TYPE CASTING STATEMENTS
#######################################################
<CAST_STMNT> ::=     (<DATA_TYPE>) <IDENTIFIER>;

#######################################################
# SWAP FUNCTION
#######################################################
<SWAP_STMNT>        ::=     <TWO_WAY_SWAP> | <THREE_WAY_SWAP>
<TWO_WAY_SWAP>      ::=     swap(<DATA_LITERAL>, <DATA_LITERAL>);
<THREE_WAY_SWAP>    ::=     swap(<DATA_LITERAL>, <DATA_LITERAL>, <DATA_LITERAL>);

#######################################################
# CHECK FUNCTION
#######################################################
<CHECK_STMNT>       ::=     <CHECK_PROPERTY> | <CHECK_METHOD>
<CHECK_PROPERTY>    ::=     check(<IDENTIFIER>.<IDENTIFIER>);
<CHECK_METHOD>      ::=     check(<IDENTIFIER>.<IDENTIFIER>(<PARAM_LIST>));

#######################################################
# HELP FUNCTION
#######################################################
<HELP_STMNT>        ::=     help(<HELP_INP>);
<HELP_INP>          ::=     ε | <STR_LITERAL> | <KEYWORDS>